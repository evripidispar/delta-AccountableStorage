#
#**************************************************************************
#*                                                                        *
#*          General Purpose Hash Function Algorithms Library              *
#*                                                                        *
#* Author: Arash Partow - 2002                                            *
#* URL: http://www.partow.net                                             *
#* URL: http://www.partow.net/programming/hashfunctions/index.html        *
#*                                                                        *
#* Copyright notice:                                                      *
#* Free use of the General Purpose Hash Function Algorithms Library is    *
#* permitted under the guidelines and in accordance with the most current *
#* version of the Common Public License.                                  *
#* http://www.opensource.org/licenses/cpl1.0.php                          *
#*                                                                        *
#**************************************************************************
#

from Crypto.Hash import SHA224
from Crypto.Hash import HMAC
from Crypto.Hash import MD5
from Crypto.Hash import MD4
from Crypto.Hash import RIPEMD
from Crypto.Hash import SHA256
from random import choice

from Crypto.Util import number

HASH1_RAND=19052013820973924320305640707595236251017773130419336102029360429140510654964368139158593901730053543562802405545885644822336194456208877658662414005132113997872687416981428510264297973374640510763082858224167938446549363492715499072464024640408100438147496795454920137056319377921031344458649724414247953017533469160704160502569288035946838347447600670124082453381361714166931835712922353604986135140360797155856982167904810437746148540531011781245441229105259160507965438554822981037829779338474026211537846092150538073776578718168410870278696597894709254348214941891097091938135576569887859527925467657334406716648
HASH2_RAND=16591371634600999726896296337445978581921454488428749853896931841915409767501790439294720857968370200083941049788935331419929835116782594473132710242538585855097285399243716361762456164349818292879799583910413847042353329306061712657161776505359938897770345004478697632946334333403165769595595391684806577188759616955283843979302403883831701311642900613404589810544408162292802492743146433122914964054645153056221661989880856167018013886856998451442573199795346720029434011674775486745858716216293632850425911992491749506808903265481212387902168189732642864420595265345676949838372286418445498982045900415220592357669
HASH3_RAND=29127769495608817817221647100234643813879279060341211968738271082914121727311602448630814366733188624853657750035888492547331769963631609125776055723420254667828548992035675424514932575867015590996323270949203189951707219185861713608766524813476781886241516571000011412660649179238247970919046554026941448862821437448743261508545446091111775861777813881307659153454451435989006125946894742838447357396978418112442367307301231547554053207730381690506885096144777356175756346900704062805764118779887269792256120535661458533528634923975606669699182009714098246761829513758604729863371857103409802863951730107427572348375
HASH4_RAND=20823284425651683028050827212911195595785572696203307058910590049762284833241550138698827568598464576494736965192878843664491694252713899378594737711636937034490316931482186678751077664097424868463209731537936653600930026702359083126951612886924656894807834903060389810211642202593645418341147655657284463472474919525067737890746630513353699340800602825956936070869151697596116302163714734413047409302515119242921886953206166933191313109474689457305424753794350790278115600551114694460584948586718664197264478597151831018846529540995459643574616945408290644640161958842225001968425210983125739363333354326172112073945
HASH5_RAND=31297195448095498669348086783915795035605326923434349167042255150428929002143665420378407171199996016989103341061404221699996224388155442984318454561341284564283890932424714158197397897294119816984746081840486670759730865091346546755522933101389924587816223950099014170915513617191732097570732196489929935895394203868239804937723519263472906015727330536202734484094533031112955331660525759945966052388943251078175322756440801132971859397412453602368818105712095130453452006272592109924778039851731733322207479299797785381776889989521279462536125089784097031892389397650670009693913351553194284174679166652461783687763
HASH6_RAND=20148136272123609191101037508594092991020153294678880656471325814873028674440668193550661618593824694531853895540956047683044239969770756578557935006570923404765517088499375815327715458393730944790835657708586948602706422051459042304999686511281699407157721225229107072451284059147469524277222145581779185074989026525561134738791715944786659380272537503122957768301095512783243509317960822140687850198409482424598240907165290451541639257479934669425905416644432684609260789362657888884805495773169303407526375790170439515723561015333093936873407665347038158334518231741962754657889766502514792870144208721960420404465

def Hash1(key):
    key = key + str(HASH1_RAND)
    h = HMAC.new(str(14))
    h.update(key)
    v = number.bytes_to_long(h.digest())
    return v
    
def Hash2(key):
    key = key + str(HASH2_RAND)
    h = SHA224.new()
    h.update(key)
    v = number.bytes_to_long(h.digest())
    return v


def Hash3(key):
    key = key + str(HASH3_RAND)
    h = MD5.new()
    h.update(key)
    v = number.bytes_to_long(h.digest())
    return v

def Hash4(key):
    key = key + str(HASH4_RAND)
    h = RIPEMD.new()
    h.update(key)
    v = number.bytes_to_long(h.digest())
    return v    


def Hash5(key):
    key = key + str(HASH5_RAND)
    h = SHA256.new()
    h.update(key)
    v = number.bytes_to_long(h.digest())
    return v   


def Hash6(key):
    key = key + str(HASH6_RAND)
    h = MD4.new()
    h.update(key)
    v = number.bytes_to_long(h.digest())
    return v



